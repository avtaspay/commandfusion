/*
System Name: CommandFusion iViewer Server
Programmer: CommandFusion
Version: 1.1
Comments: www.commandfusion.com
		  for firmware 3.x
*/

#HELP_BEGIN
Please refer to the 'CommandFusion iViewer Crestron Module' PDF packaged with the iViewer Crestron sample program.
The User Guide PDF can also be obtained from our website - http://www.commandfusion.com/downloads
#HELP_END

#SYMBOL_NAME "CommandFusion iViewer Server v3.0"
#CATEGORY "46" "iPhone / iPod Touch" // Custom
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ANALOG_SERIAL_EXPAND InputsWithOutputs
#DIGITAL_EXPAND InputsWithOutputs
             
BUFFER_INPUT _SKIP_, rx$[999];
STRING_INPUT Password$[20];
DIGITAL_INPUT DebugMode, SystemBarToggle, SystemBarShow, SystemBarHide, RequestVersion, _SKIP_, fb[9999, 10];
ANALOG_INPUT ActivityTimeoutAmount, ConnectionStatus, _SKIP_, an_fb[999], _SKIP_;
STRING_INPUT text_o[999, 1][255];
              
DIGITAL_OUTPUT PortraitMode, LandscapeMode, DeviceConnected_fb, ReceivedData, ActivityTimeout, _SKIP_, press[9999, 10];
STRING_OUTPUT _SKIP_, tx$, list_rx$, iViewerVersion;
ANALOG_OUTPUT _SKIP_, _SKIP_, an_act[999], _SKIP_;
STRING_OUTPUT text_i[999, 1];

//TCP_SERVER CommandServer[9999];

String Debug[9999];
Integer AccessGranted;

FUNCTION DebugLogLine(String msg) {
	if (DebugMode) {
		Print("\n[%s] %s", TIME(), msg);
	}
	Debug = "";
}

String_Function InitializeFeedback() {
	STRING Response[9999], Temp[999];
	INTEGER i;

	// Get status of each join

	// Digital
	for (i=1 to GetNumArrayCols(fb)) {
		if (IsSignalDefined(fb[i])) {
			if (fb[i]) {
				Response = Response + "d" + ITOA(i) + "=" + ITOA(fb[i]) + "\x03";
			}
		}
	}
    // Analog
	for (i=1 to GetNumArrayCols(an_fb)) {
		if (IsSignalDefined(an_fb[i])) {
			if (an_fb[i]) {
				Response = Response + "a" + ITOA(i) + "=" + ITOA(an_fb[i]) + "\x03";
			}
		}
	}
    // Serial
	for (i=1 to GetNumArrayCols(text_o)) {
		if (IsSignalDefined(text_o[i])) {
			if (text_o[i] <> "") {
				Response = Response + "s" + ITOA(i) + "=" + text_o[i] + "\x03";
			}
		}
	}

	Return (Response);
}

FUNCTION SendFeedback(STRING theMsg) {
	SIGNED_INTEGER status;
	//Debug = "Sending: " + theMsg;
    //DebugLogLine(Debug);
	tx$ = theMsg;
}

FUNCTION ProcessCommands(String CommandRequest) {

	String Response[9999], CommandType[1], Join[10], Value[255], Request[9999], Trash[1];
	
	Request = CommandRequest;

	// Get command type (d, a, s)
	CommandType = RemoveByLength(1, Request);
	if (CommandType = "i") {
		if (AccessGranted) {
			// Initialize request
			SendFeedback(InitializeFeedback());
			// use remaining response as value
			Value = RemoveByLength(LEN(Request), Request);
		}
	} else if (CommandType = "p") {
		// Password received
		// Remove the equals sign
		Trash = RemoveByLength(1, Request);
		// use remaining response as value
		AccessGranted = 0;
		// Check for empty passwords
		if (len(Request)) {
			Value = RemoveByLength(LEN(Request), Request);
		} else {
			Value = "";
		}
	        
		if (Password$ = Value || Password$ = "na") {
			Response = "p=ok\x03";
			AccessGranted = 1;
			DeviceConnected_fb = 1;
		} else {
			Response = "p=bad\x03";
		}
		SendFeedback(Response);
	} else if (CommandType = "m") {
		// Orientation change
		// Remove the equals sign
		Trash = RemoveByLength(1, Request);
		// use remaining response as value
		Value = RemoveByLength(LEN(Request), Request);
		if (Value = "portrait") {
			LandscapeMode = 0;
			PortraitMode = 1;
		} else if (Value = "landscape") {
			PortraitMode = 0;
			LandscapeMode = 1;
		}
	} else if (CommandType = "h") {
		// Heartbeat message
		// Remove the equals sign
		Trash = RemoveByLength(1, Request);
		// use remaining response as value
		Value = RemoveByLength(LEN(Request), Request);
		if (Value = "0") {
			Response = "h=1\x03";
			SendFeedback(Response);
		}
	} else if (CommandType = "l") {
		// Received list data
		list_rx$ = "l" + Request + "\x03";
	} else if (FIND("=", Request) > 1) {
		if (AccessGranted) {
			// Get join number
			Join = RemoveByLength(FIND("=", Request) - 1, Request);
			// Remove the equals sign
			Trash = RemoveByLength(1, Request);
			// use remaining response as value
			Value = Request;
			// Remove end of message delimeter
			if (RIGHT(Value, 1) = "\x03") {
				Value = Left(Value, LEN(Value) - 1);
			}
	
			// Disguard zero joins
			if (ATOI(Join) > 0) {
				//Print("\nCommandType: %s, Join: %d, Value: %s", CommandType, ATOI(Join), Value);
				if(CompareStrings(LEFT(CommandType, 1), "d") = 0) {
					Debug = "Digital " + Join + ": " + Value;
					DebugLogLine(Debug);
					if (IsSignalDefined(press[ATOI(Join)])) {
						press[ATOI(Join)] = ATOI(Value);
					}
				} else if(CompareStrings(CommandType, "a") = 0) {
					Debug = "Analog " + Join + ": " + Value;
					DebugLogLine(Debug);
		
					if (IsSignalDefined(an_act[ATOI(Join)])) {
						an_act[ATOI(Join)] = ATOI(Value);
					}
				} else if(CompareStrings(CommandType, "s") = 0) {
					Debug = "Serial " + Join + ": " + Value;
					DebugLogLine(Debug);
		
					if (IsSignalDefined(text_i[ATOI(Join)])) {
						text_i[ATOI(Join)] = Value;
					}
					// Reserved join for iViewer version number on client
					if (ATOI(Join) = 10001) {
						iViewerVersion = value;
					}
				} else if (DebugMode) {
					DebugLogLine("Couldn't match the command");
				}
			}
		}
	}
}

PUSH RequestVersion {
	SendFeedback("d10001=1");
	SendFeedback("d10001=0");
}

CHANGE fb {
	INTEGER index;
	STRING Response[2000];

	index = GetLastModifiedArrayIndex();
   	Response = "d" + ITOA(index) + "=" + ITOA(fb[index]) + "\x03";
	SendFeedback(Response);
}

CHANGE an_fb {
	INTEGER index, Value;
	STRING Response[2000];

	index = GetLastModifiedArrayIndex();
	Value = an_fb[index];
	Response = "a" + ITOA(index) + "=" + ITOA(Value) + "\x03";
	SendFeedback(Response);
}

CHANGE text_o {
	INTEGER index;
	STRING Response[2000];

	index = GetLastModifiedArrayIndex();
	if (text_o[index] = "\xFE") {
		Response = "s" + ITOA(index) + "=\x03";
	} else {	 
		Response = "s" + ITOA(index) + "=" + text_o[index] + "\x03";
	}
	SendFeedback(Response);
}

PUSH SystemBarToggle {
	SendFeedback("d17922=1\x03");
}

PUSH SystemBarShow {
	SendFeedback("d17931=1\x03");
}

PUSH SystemBarHide {
	SendFeedback("d17932=0\x03");
}

// CONNECTIONS
FUNCTION Connected() {
	DebugLogLine("TCP/IP connection established...");
	WAIT(ActivityTimeoutAmount * 100, ActivityWatcher) {
		PULSE(100, ActivityTimeout);
		DebugLogLine("Activity Timeout.");
	}
}

FUNCTION Disconnected() {
	Integer i;

	CANCELWAIT(ActivityWatcher);

	DebugLogLine("iViewer disconnected");
	AccessGranted = 0;
	DeviceConnected_fb = 0;

	// Force all digital outputs low, safeguard against held buttons (volume ramping etc, after disconnecting)
	for (i=1 to GetNumArrayCols(press)) {
		if (IsSignalDefined(press[i])) {
			press[i] = 0;
		}
	}
}

// Monitor the TCP/IP Server Status:
CHANGE ConnectionStatus {
	SWITCH (ConnectionStatus) {
		CASE (0): //Not connected
		{
			DebugLogLine("Not connected.");
		}
		CASE (1): //Waiting for connection
		{
            DebugLogLine("Waiting for connection.");
		}
		CASE (2): //Connected
		{
			AccessGranted = 0;
			Connected();
		}
		CASE (3): //Connection failed
		{
			DebugLogLine("TCP/IP connection failed!");
			Disconnected();
		}  
		CASE (4): //Connection broken remotely
		{
			DebugLogLine("TCP/IP connection broken remotely.");
			Disconnected();
		}
		CASE (5): //Connection broken locally
		{
			DebugLogLine("TCP/IP connection broken locally.");
			Disconnected();		
		}
		CASE (6): //Performing DNS lookup
		{
			DebugLogLine("Doing DNS lookup");
		}
		CASE (7): //DNS lookup failed
		{
			DebugLogLine("DNS lookup failed - aborting...");
			Disconnected();
		}
		DEFAULT:
		{
			Debug = "Unknown TCP/IP server status: " + ITOA(ConnectionStatus);
			DebugLogLine(Debug);
		}
	}
}

CHANGE rx$ {
	STRING msgReceived[9999], temp[9999], trash$[10];
	INTEGER index;

	PULSE(50, ReceivedData);

	RETIMEWAIT(ActivityTimeoutAmount * 100, ActivityWatcher);

	if (FIND("\x03",rx$) > 0) {
		//DebugLogLine("Found EOM character - Parsing data");
		msgReceived = msgReceived + rx$;
		ClearBuffer(rx$);
	
		Debug = "iViewer Received: " + msgReceived;
		DebugLogLine(Debug);
	
		While (LEN(msgReceived) > 0) {
			index = FIND("\x03", msgReceived);
			if (index > 1) {
				temp = RemoveByLength(index - 1, msgReceived);
				//Debug = "Parsed data: " + temp;
				//DebugLogLine(Debug);
				trash$ = RemoveByLength(1, msgReceived);
				ProcessCommands(temp);
			} else if (index = 1 && LEN(msgReceived) > 1) {
				trash$ = RemoveByLength(1, msgReceived);
			} else {
				break;
			}
		}
	}
}
