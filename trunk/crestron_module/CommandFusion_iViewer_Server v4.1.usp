/*
System Name: CommandFusion iViewer Server
Programmer: CommandFusion
Version: 4.1
Comments:  www.commandfusion.com
*/

#HELP_BEGIN
Please refer to the 'CommandFusion iViewer Crestron Module' PDF packaged with the iViewer Crestron sample program.
The User Guide PDF can also be obtained from our website - http://www.commandfusion.com/downloads
#HELP_END

#SYMBOL_NAME "CommandFusion iViewer Server v4.1"
#CATEGORY "46" "iPhone / iPod Touch" // Custom
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ANALOG_SERIAL_EXPAND InputsWithOutputs
#DIGITAL_EXPAND InputsWithOutputs
#ENABLE_TRACE

STRING_INPUT list_tx$[255];
DIGITAL_INPUT _SKIP_, _SKIP_, _SKIP_, RequestVersion, _SKIP_,  SystemBarToggle, SystemBarShow, SystemBarHide, DebugMode, EnableConnections, _SKIP_, fb[999, 1];
ANALOG_INPUT _SKIP_, _SKIP_, _SKIP_, an_fb[20, 1],_SKIP_;
STRING_INPUT text_o[240, 1][255];
              
STRING_OUTPUT iViewerVersion, list_rx$;
DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_, PortraitMode, LandscapeMode, _SKIP_, ReceivedData, ActivityTimeout, _SKIP_, EnableConnections_fb, _SKIP_, press[999, 1];
ANALOG_OUTPUT CommandSocketStatus, _SKIP_;
ANALOG_OUTPUT an_act[20, 1],_SKIP_;
STRING_OUTPUT text_i[240, 1];

STRING_PARAMETER Password$[20];
INTEGER_PARAMETER Port, ActivityTimeoutAmount;

#BEGIN_PARAMETER_PROPERTIES Port
	propValidUnits=unitDecimal;
	propShortDescription= "Port for handling communication with the iViewer.";
#END_PARAMETER_PROPERTIES
#BEGIN_PARAMETER_PROPERTIES ActivityTimeoutAmount
	propValidUnits=unitDecimal;
	propShortDescription= "Time in seconds to wait before closing a connection due to no activity.";
#END_PARAMETER_PROPERTIES
#BEGIN_PARAMETER_PROPERTIES Password$
	propValidUnits=unitString;
	propDefaultValue="na";
	propShortDescription="Access password (enter 'na' without quotes for blank password)";
#END_PARAMETER_PROPERTIES

TCP_SERVER CommandServer[9999];

String Debug[255], text_o_store[240][255];
Integer AccessGranted;

FUNCTION DebugLogLine(String msg) {
	if (DebugMode) {
		Print("\n[%s] %s", TIME(), msg);
	}
	Debug = "";
}

String_Function InitializeFeedback() {
	STRING Response[9999];
	INTEGER i;

	// Get status of each join

	// Digital
	for (i=1 to GetNumArrayCols(fb)) {
		if (IsSignalDefined(fb[i])) {
			if (fb[i]) {
				Response = Response + "d" + ITOA(i) + "=" + ITOA(fb[i]) + "\x03";
			}
		}
	}
    // Analog
	for (i=1 to GetNumArrayCols(an_fb)) {
		if (IsSignalDefined(an_fb[i])) {
			if (an_fb[i]) {
				Response = Response + "a" + ITOA(i) + "=" + ITOA(an_fb[i]) + "\x03";
			}
		}
	}
    // Serial
	for (i=1 to GetNumArrayCols(text_o)) {
		if (IsSignalDefined(text_o[i])) {
			if (text_o_store[i] <> "") {
				Response = Response + "s" + ITOA(i) + "=" + text_o_store[i] + "\x03";
			}
		}
	}

	if (SystemBarToggle) {
		Response = Response + "d17922=1\x03";
	}

	if (SystemBarShow) {
		Response = Response + "d17931=1\x03";
	}

	if (SystemBarHide) {
		Response = Response + "d17932=0\x03";
	}

	Return (Response);
}

FUNCTION SendFeedback(STRING theMsg) {
	SIGNED_INTEGER status;

	if (CommandServer.SocketStatus = 2) {
		status = SocketSend(CommandServer, theMsg);
		if (status < 0) {
			Debug = "Error sending to iViewer: " + ITOA(status);
			DebugLogLine(Debug);
		}
	}
}

FUNCTION ProcessCommands(String CommandRequest) {

	String Response[1024], CommandType[1], Join[10], Value[255], Request[1024], Trash[1];
	
	Request = CommandRequest;

	// Get command type (d, a, s)
	CommandType = RemoveByLength(1, Request);
	if (CommandType = "i") {
		if (AccessGranted) {
			// Initialize request
			SendFeedback(InitializeFeedback());
			// use remaining response as value
			Value = RemoveByLength(LEN(Request), Request);
		}
	} else if (CommandType = "h") {
		Trace("Heartbeat. (Port: %u)",port);
		// Heartbeat message
		// Remove the equals sign
		Trash = RemoveByLength(1, Request);
		// use remaining response as value
		Value = RemoveByLength(LEN(Request), Request);
		if (Value = "0") {
			Response = "h=1\x03";
			SendFeedback(Response);
		}
	} else if (CommandType = "p") {
		// Password received
		// Remove the equals sign
		Trash = RemoveByLength(1, Request);
		// use remaining response as value
		AccessGranted = 0;
		// Check for empty passwords
		if (len(Request)) {
			Value = RemoveByLength(LEN(Request), Request);
		} else {
			Value = "";
		}
	        
		if (Password$ = Value || Password$ = "na") {
			Response = "p=ok\x03" + InitializeFeedback();
			AccessGranted = 1;
		} else {
			Response = "p=bad\x03";
		}
		SendFeedback(Response);
	} else if (CommandType = "m") {
		// Orientation change
		// Remove the equals sign
		Trash = RemoveByLength(1, Request);
		// use remaining response as value
		Value = RemoveByLength(LEN(Request), Request);
		if (Value = "portrait") {
			LandscapeMode = 0;
			PortraitMode = 1;
		} else if (Value = "landscape") {
			PortraitMode = 0;
			LandscapeMode = 1;
		}
	} else if (CommandType = "l") {
		// Received list data
		list_rx$ = "l" + Request + "\x03";
	} else if (FIND("=", Request) > 1) {
		if (AccessGranted) {
			// Get join number
			Join = RemoveByLength(FIND("=", Request) - 1, Request);
			// Remove the equals sign
			Trash = RemoveByLength(1, Request);
			// use remaining response as value
			Value = Request;
			// Remove end of message delimeter
			if (RIGHT(Value, 1) = "\x03") {
				Value = Left(Value, LEN(Value) - 1);
			}
	
			// Disguard zero joins
			if (ATOI(Join) > 0) {
				//Print("\nCommandType: %s, Join: %d, Value: %s", CommandType, ATOI(Join), Value);
				if(CompareStrings(LEFT(CommandType, 1), "d") = 0) {
					Debug = "Digital " + Join + ": " + Value;
					DebugLogLine(Debug);
					if (IsSignalDefined(press[ATOI(Join)])) {
						press[ATOI(Join)] = ATOI(Value);
					}
				} else if(CompareStrings(CommandType, "a") = 0) {
					Debug = "Analog " + Join + ": " + Value;
					DebugLogLine(Debug);
		
					if (IsSignalDefined(an_act[ATOI(Join)])) {
						an_act[ATOI(Join)] = ATOI(Value);
					}
				} else if(CompareStrings(CommandType, "s") = 0) {
					Debug = "Serial " + Join + ": " + Value;
					DebugLogLine(Debug);
		
					if (IsSignalDefined(text_i[ATOI(Join)])) {
						text_i[ATOI(Join)] = Value;
					}
					// Reserved join for iViewer version number on client
					if (ATOI(Join) = 10001) {
						iViewerVersion = value;
					}
				} else if (DebugMode) {
					DebugLogLine("Couldn't match the command");
				}
			}
		}
	}
}

PUSH RequestVersion {
	SendFeedback("d10001=1");
	SendFeedback("d10001=0");
}

CHANGE fb {
	INTEGER index;
	STRING Response[255];

	index = GetLastModifiedArrayIndex();
   	Response = "d" + ITOA(index) + "=" + ITOA(fb[index]) + "\x03";
	SendFeedback(Response);
}

CHANGE an_fb {
	INTEGER index, Value;
	STRING Response[255];

	index = GetLastModifiedArrayIndex();
	Value = an_fb[index];
	Response = "a" + ITOA(index) + "=" + ITOA(Value) + "\x03";
	SendFeedback(Response);
}

CHANGE text_o {
	INTEGER index;
	STRING Response[255];

	index = GetLastModifiedArrayIndex();
	if (text_o[index] = "") {
		Response = "s" + ITOA(index) + "= \x03";
		text_o_store[index] = " ";
	} else {	 
		Response = "s" + ITOA(index) + "=" + text_o[index] + "\x03";
		text_o_store[index] = text_o[index];
	}
	SendFeedback(Response);
}

CHANGE list_tx$ {
	SendFeedback(list_tx$);
}

PUSH EnableConnections {
	SIGNED_INTEGER status;
	DebugLogLine("iViewer Connections Enabled");
	AccessGranted = 0;
	//Trace("\nPort: %i", Port);
	if (Port > 1) {
		// Start server listening
		status = SocketServerStartListen(CommandServer, "0.0.0.0", Port);
		if (status < 0) {
			Print("Error listening to 0.0.0.0 on port %u (status: %d)", port, status);
		}
	}
}

RELEASE EnableConnections {
	DebugLogLine("iViewer Connections Disabled");

	// Stop client handler server listening
	SocketServerStopListen(CommandServer);
}

PUSH SystemBarToggle {
	SendFeedback("d17922=1\x03");
}

PUSH SystemBarShow {
	SendFeedback("d17931=1\x03");
}

PUSH SystemBarHide {
	SendFeedback("d17932=0\x03");
}

// CONNECTIONS
SOCKETCONNECT CommandServer {
	DebugLogLine("iViewer connected");
	WAIT(ActivityTimeoutAmount * 100, ActivityWatcher) {
		PULSE(50, ActivityTimeout);
	}
}
SOCKETRECEIVE CommandServer {
	STRING msgReceived[1024], temp[255];

	PULSE(50, ReceivedData);

	RETIMEWAIT(ActivityTimeoutAmount * 100, ActivityWatcher);
                  
	msgReceived = CommandServer.SocketRxBuf;
	ClearBuffer(CommandServer.SocketRxBuf);

	Debug = "iViewer Received: " + msgReceived;
	DebugLogLine(Debug);

	While (LEN(msgReceived) > 0) {
		temp = Remove("\x03", msgReceived);
		temp = LEFT(temp, LEN(temp) - 1);
		if (LEN(temp) = 0) {
			break;
		} else {
			ProcessCommands(temp);
		}
	}
}
SOCKETDISCONNECT CommandServer {
	SIGNED_INTEGER status;
	Integer i;

	CANCELWAIT(ActivityWatcher);

	DebugLogLine("iViewer disconnected");
	AccessGranted = 0;

	// Force all digital outputs low, safeguard against held buttons (volume ramping etc, after disconnecting)
	for (i=1 to GetNumArrayCols(press)) {
		if (IsSignalDefined(press[i])) {
			press[i] = 0;
		}
	}
}
SOCKETSTATUS CommandServer {
    CommandSocketStatus = SocketGetStatus();
}

/*
Function Main() {
	if (WaitForInitializationComplete() < 0) {
		DebugLogLine("Error waiting for initialization complete");
		return;
	}
	AccessGranted = 0;
}
*/