/*
System Name: CommandFusion iViewer List Processor - Room Lighting example
Programmer: CommandFusion
Version: 1.1
Comments: www.commandfusion.com
		  for firmware v4+ ONLY!
*/

#HELP_BEGIN
Example SIMPL+ module showing how list processing should be done.
This example allows for generating a list of rooms, with the following items in each list row:
- serial join for the room name
- digital join for when the list item is pressed
- digital join for the light state.

Pressing the list item will pulse the corresponding 'RoomSelect' digital output
    
UpdateList Digital Input:
-------------------------
The list data will be sent on the rising edge of this input.
This digital input must be held high to allow RoomState inputs to update the list.

RoomState Digital Inputs:
-------------------------
These inputs will change the state of digital join 2 in the list rows.
These inputs only have effect when UpdateList input is held high.

#HELP_END

#SYMBOL_NAME "CommandFusion iViewer List Processor - Room Lighting"
#CATEGORY "46" "iPhone / iPod Touch" // Custom
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#DIGITAL_EXPAND InputsWithOutputs

BUFFER_INPUT list_rx$[30];
DIGITAL_INPUT _SKIP_, UpdateList, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, RoomState[20], _SKIP_;
                                    	
STRING_OUTPUT list_tx$;
DIGITAL_OUTPUT _SKIP_, UpdatingList_fb, RoomSelect[20], _SKIP_, RoomStateToggle[20], _SKIP_;

INTEGER_PARAMETER ListJoin;
STRING_PARAMETER DUMMY[20], RoomName$[20][50];

#BEGIN_PARAMETER_PROPERTIES RoomName$
   propValidUnits= unitString;
   propDefaultUnit=unitString;
   propDefaultValue="";
   propShortDescription= "Enter a name for each room.";
#BEGIN_PROP_FULL_DESCRIPTION 
Enter the name of each room.
The name will be displayed on serial join 1 within a list content subpage.
#END_PROP_FULL_DESCRIPTION
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES ListJoin
   propValidUnits= unitDecimal;
   propDefaultUnit=unitDecimal;
   propDefaultValue=1d;
   propShortDescription= "Enter the lists analog join number.";
#BEGIN_PROP_FULL_DESCRIPTION 
Enter the analog join number for the list.
This is the join number assigned to the list within guiDesigner that you want to associate the list contents with.
#END_PROP_FULL_DESCRIPTION
#END_PARAMETER_PROPERTIES
     

#BEGIN_PARAMETER_PROPERTIES DUMMY
   propValidUnits= unitString;
   propDefaultUnit=unitString;
   propDefaultValue="DUMMY PARAM";
   propShortDescription= "Parameter does nothing, DO NOT USE!";
#END_PARAMETER_PROPERTIES
             
String Debug[100];

/*
FUNCTION DebugLogLine(String msg) {
	if (DebugMode) {
		Print("\n[%s] %s", TIME(), msg);
	}
	Debug = "";
}
*/

FUNCTION ProcessCommands(String CommandRequest) {
    Integer Join, Value, ListItem;
	String theListJoin[3], CommandType[1], Request[99], Trash[1];
	
	Request = CommandRequest;
                         
	// Ensure the data is a valid list command
	if (FIND("l", Request) = 1 && FIND("=", Request) > 1) {
		// Remove the lowercase 'L'
		Trash = RemoveByLength(1, Request);
		// Get the List Join number
		theListJoin = RemoveByLength(FIND(":", Request) - 1, Request);
		// Only continue parsing data if its the correct list join for this symbol instance
		if (ATOI(theListJoin) = listJoin) {
			// Remove the ':'
			Trash = RemoveByLength(1, Request);
			// Get the List Item number
			ListItem = ATOI(RemoveByLength(FIND(":", Request) - 1, Request));
			// Remove the ':'
			Trash = RemoveByLength(1, Request);
			// Get command type (d, a, s)
			CommandType = RemoveByLength(1, Request);
			// Get join number
			Join = ATOI(RemoveByLength(FIND("=", Request) - 1, Request));
			// Remove the equals sign
			Trash = RemoveByLength(1, Request);
			// use remaining response as value
			// Remove end of message delimeter
			if (RIGHT(Request, 1) = "\x03") {
				Value = ATOI(Left(Request, LEN(Request) - 1));
			} else {
				Value = ATOI(Request);
			}
	
			// Disguard zero joins
			if (Join > 0) {
				//Print("\nCommandType: %s, Join: %d, Value: %d", CommandType, Join, Value);
				if (CompareStrings(CommandType, "d") = 0) {
					// Only activate on button release (Value = 0)
					// so that accidental presses in the list are not registered when user eventually drags the list up or down
					if (Value = 0) {
						if (Join = 1) {
							// Room selected
							PULSE(100, RoomSelect[ListItem + 1]);
						} else if (Join = 2) {
	                    	// Light button pressed
							PULSE(100, RoomStateToggle[ListItem + 1]);
						}
					}
				}
			}
		}
	}
}

PUSH updateList {
	INTEGER index, Value, i, j;
	STRING updateMsg[9999];

	// Tell iViewer Module we are updating the list
	UpdatingList_fb = 1;
	// Ensure updating has been set before starting to send data
	ProcessLogic();	

    
   	// Build the list message, clearing the list first using 0x command, then sending new list contents
    list_tx$ = "l" + ITOA(ListJoin) + "=0x\x03";

	updateMsg = "l" + ITOA(ListJoin) + "=";
	FOR (i = 1 TO 20) {
		if (RoomName$[i] <> "") {
			updateMsg = updateMsg + ITOA(i - 1) + "c\x1Es1=" + RoomName$[i] + "\x1Ed1=0\x1Ed2=" + ITOA(RoomState[i]) + "\x0D";
		}
	}
	updateMsg = updateMsg + "\x03";

	// Ensure only 255 characters or less are sent out each time, SIMPL Serial limitation
	While(LEN(updateMsg) > 200) {
		list_tx$ = REMOVEBYLENGTH(200, updateMsg);
	}
	if (LEN(updateMsg) <> 0) {
		list_tx$ = updateMsg;
	}
	ProcessLogic();

	// Tell iViewer module we have finished updating the list
	UpdatingList_fb = 0;
}

CHANGE list_rx$ {
	STRING msgReceived[999], temp[999], trash$[10];
	INTEGER index;

	if (FIND("\x03",list_rx$) > 0) {
		//DebugLogLine("Found EOM character - Parsing data");
		msgReceived = list_rx$;
		ClearBuffer(list_rx$);
	
		Print("iViewer List Received: %s\n", msgReceived);
		//DebugLogLine(Debug);
	
		While (LEN(msgReceived) > 0) {
			index = FIND("\x03", msgReceived);
			if (index > 1) {
				temp = RemoveByLength(index - 1, msgReceived);
				//Debug = "Parsed data: " + temp;
				//DebugLogLine(Debug);
				trash$ = RemoveByLength(1, msgReceived);
				if (LEFT(temp, 1) = "l") {
					ProcessCommands(temp);
				}
			} else if (index = 1 && LEN(msgReceived) > 1) {
				trash$ = RemoveByLength(1, msgReceived);
			} else {
				break;
			}
		}
	}
}

CHANGE RoomState {
	Integer index;
                                
	// Only allow state change to show in list if this list is active
	if (UpdateList) {
		// Which room state changed?
		index = GetLastModifiedArrayIndex();
	
		// Update the light status for the room in the list
		list_tx$ = "l" + ITOA(ListJoin) + "=" + ITOA(index - 1) + "c\x1Ed2=" + ITOA(RoomState[index]) + "\x0D\x03";
	}
}
